<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Beans externos necesarios: -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" p:jndiName="java:comp/env/jdbc/appweb-customerloyaltyengine" />
	
	<bean id="aplicacionSSO" class="java.lang.String">
		<constructor-arg value="${aplicacionSSO}" />
	</bean>

	<!-- -->
	<!-- Configuracion de beans -->
	<!-- -->
	<!-- Enable usage of @Autowired. -->
	<context:annotation-config />
	<!-- Component scan para que busque las clases anotadas para incluir en el contexto de spring -->
	<context:component-scan base-package="com.inditex.ecom.appwebcustomerloyaltyengine" />

	<!-- -->
	<!-- Acceso a Datos -->
	<!-- -->

	<!-- For translating native persistence exceptions to Spring's DataAccessException hierarchy. -->
	<!-- <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /> -->

	<!-- Session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" p:dataSource-ref="dataSource">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>

				<!-- Ver: http://stackoverflow.com/questions/7500030/spring-hibernate-exception-createcriteria-is-not-valid-without-active-transacti -->
				<!-- <prop key="hibernate.current_session_context_class">thread</prop> -->

				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">true</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
				<prop key="hibernate.jdbc.use_get_generated_keys">true</prop>

				<prop key="hibernate.max_fetch_depth">0</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.generate_statistics">true</prop>
			</props>
		</property>

		<property name="mappingLocations">
			<list>
				<value>classpath:mapping/*.hbm.xml</value>
			</list>
		</property>
	</bean>

	<!-- -->
	<!-- Transaccionalidad -->
	<!-- -->
	<!-- Transaction manager for a single Hibernate SessionFactory. -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- Configuracion del aspecto de transaccionalidad -->
	<!-- NOTA: por defecto, Spring hace rollback cuando ocurren excepciones "unchecked" (excepciones de runtime o errores). Con "rollback-for" se pueden 
		especificar excepciones adicionales (de tipo "checked") para las que se desea que Spring haga rollback. -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="update*" rollback-for="com.inditex.commerce.reglasafiliacion.wsc.model.excepciones.NumeroSerieException" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="read*" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="get*" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="find*" propagation="SUPPORTS" /> -->

<!-- 			<tx:method name="create*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="delete*" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="remove*" propagation="REQUIRED" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->

	<!-- Interceptor de llamadas a servicios -->
	<!-- <aop:config> <aop:pointcut id="managerPointCut" expression="execution(* 
		com.inditex..*ServiceImpl.*(..))"/> <aop:advisor order="1" advice-ref="txAdvice" 
		pointcut-ref="managerPointCut"/> </aop:config> -->

	<!-- -->
	<!-- Auditoria -->
	<!-- -->
	<!-- Habilitamos los proxies dinamicos basados en AOP para integrar interceptor 
		de auditoria -->
	<aop:aspectj-autoproxy />

	<alias name="dataSource" alias="auditDataSource" />
	<alias name="transactionManager" alias="auditTransactionManager" />

	<!-- Servicio para rellenar el contexto de evento de auditoria mediante 
		escaneo de anotaciones @Auditable -->
	<bean id="contextoAppenderService" class="com.inditex.arquitectura.auditoria.service.impl.AuditableContextoAppenderService" />

	<!-- Interceptor para auditar operaciones anotadas con @Audited, segundo 
		aspecto para construir proxies -->
	<!-- <bean id="auditInterceptor" class="com.inditex.arquitectura.auditoria.interceptor.AuditInterceptor"> 
		<property name="auditoriaService" ref="auditoriaService" /> <property name="contextoAppenderService" 
		ref="contextoAppenderService" /> <property name="order" value="2" /> </bean> -->

	<!-- -->
	<!-- Ficheros de internacionalizacion -->
	<!-- -->

	<bean id="modelMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:useCodeAsDefaultMessage="true">
		<property name="basenames">
			<list>
				<value>ModelResources</value>
				<value>OvalRedefinedMessages</value>
				<value>net.sf.oval.Messages</value>
			</list>
		</property>
	</bean>

	<!-- -->
	<!-- Validator (OVal) -->
	<!-- -->
	<import resource="spring-validator.xml" />

	<!-- Configuracion aop -->
	<aop:aspectj-autoproxy expose-proxy="true" />

	<!-- Interceptor AOP de reintentos -->
	<bean id="retryInterceptor" class="com.inditex.common.business.retry.RetryInterceptor" />
</beans>
