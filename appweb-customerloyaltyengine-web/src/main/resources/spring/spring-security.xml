<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!-- Cadena de filtros de spring security. -->
    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map>
            <security:filter-chain pattern="/**" filters="httpSessionContextIntegrationFilter,preAuthFilter,exceptionTranslationFilter,securityContextHolderAwareRequestFilter,filterInvocationInterceptor" />
        </security:filter-chain-map>
    </bean>
    
    <!-- Filtro de pre-autenticacion -->
    <bean id="preAuthFilter" class="org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter" p:authenticationManager-ref="authenticationManager"/>

    <!-- Bean encargado de integrar los datos de autenticacion y autorizacion en la sesion. No es necesario tocar. -->
    <bean id="httpSessionContextIntegrationFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

    <!-- Wrapper de la request original, para poder pedir los datos de autenticacion y autorizacion directamente a la request. 
        No es necesario tocar. -->
    <bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

    <!-- Captura la excepcion producida por la no autenticacion por parte de FilterSecurityInterceptor, para enviarnos al punto 
        de entrada de la autenticacion y autorizacion. No es necesario tocar. -->
    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <constructor-arg ref="forbiddenEntryPoint" />
    </bean>

    <bean id="forbiddenEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

    <!-- Anotaciones de seguridad habilitadas: @PreAuthorize y @PostAuthorize, @Secured -->
    <security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled" jsr250-annotations="disabled" access-decision-manager-ref="accessDecisionManager" />

    <!-- Bean encargado de lanzar la excepcion de no autenticacion en caso de que no se este autenticado. Se encarga tambien 
        de definir que roles pueden acceder a los recursos. En este bean habra que configurar los roles que podran acceder a las 
        distintas urls. Se pueden usar patrones tipo apache ant, como los mostrados por defecto. -->
    <bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <!-- Permite aplicar el filtro en caso de forward -->
        <property name="observeOncePerRequest" value="false" />
        <property name="accessDecisionManager" ref="accessDecisionManager" />
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source use-expressions="false">
                <security:intercept-url pattern="/**/clientes" access="ROLE_GESTION_USUARIOS" />
                <security:intercept-url pattern="/**/baja" access="ROLE_GESTION_USUARIOS" />
                <security:intercept-url pattern="/**/recarga" access="ROLE_GESTION_USUARIOS" />
<!--                 <security:intercept-url pattern="/**/*" access="administrador,usuario" /> -->
            </security:filter-security-metadata-source>
        </property>
    </bean>
    
    <!-- Definicion del autenticationManager. No es necesario tocar. -->
    <security:authentication-manager alias="authenticationManager">
    	<security:authentication-provider>
    		<security:user-service>
       			<security:user name="inditexUser" password="inditex" authorities="ROLE_ADMIN,ROLE_USER,ROLE_CONSULTA,ROLE_GESTION_PEDIDOS,ROLE_GESTION_USUARIOS" />
   				<security:user name="otroUser" password="otro" authorities="ROLE_USER,ROLE_CONSULTA" />
       		</security:user-service>
    	</security:authentication-provider>
<!--         <security:authentication-provider ref="authenticationProviderIdx" /> -->
    </security:authentication-manager>

    <!-- Gestor de decisiones de acceso. No es necesario tocar. -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value="" />
                </bean>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions" value="false" />
    </bean>
    
    <!-- Proveedor de autenticacion flexible -->
<!--     <bean id="authenticationProviderIdx" class="com.inditex.distribucion.reglasdistonline.wsc.web.common.AuthenticationProviderIdxProxy"> -->
<!--         <property name="userNameProvider" ref="userNameProvider" /> -->
<!--         <property name="principalProvider" ref="principalProvider" /> -->
<!--         <property name="transfUsername" ref="transfUsername" /> -->
<!--         <property name="roleUtil" ref="roleUtil" /> -->
<!--     </bean> -->
    
</beans>
